package name.neilbartlett.eclipse.bndtools.editor.model;

import java.util.Map;

public class ImportPattern {
	private final String pattern;
	private final boolean optional;
	private final Map<String, String> attributes;

	public ImportPattern(String pattern, boolean optional, Map<String,String> attributes) {
		this.pattern = pattern;
		this.optional = optional;
		this.attributes = attributes;
	}
	public String getPattern() {
		return pattern;
	}
	public boolean isOptional() {
		return optional;
	}
	public Map<String, String> getAttributes() {
		return attributes;
	}
	@Override
	public String toString() {
		return pattern + ";" + attributes;
	}
	/*
	 * (non-Javadoc)
	 * Generated by Eclipse
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((attributes == null) ? 0 : attributes.hashCode());
		result = prime * result + (optional ? 1231 : 1237);
		result = prime * result + ((pattern == null) ? 0 : pattern.hashCode());
		return result;
	}
	/*
	 * (non-Javadoc)
	 * Generated by Eclipse
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ImportPattern other = (ImportPattern) obj;
		if (attributes == null) {
			if (other.attributes != null)
				return false;
		} else if (!attributes.equals(other.attributes))
			return false;
		if (optional != other.optional)
			return false;
		if (pattern == null) {
			if (other.pattern != null)
				return false;
		} else if (!pattern.equals(other.pattern))
			return false;
		return true;
	}
}
