/*
 * build Gradle build script
 */

import aQute.bnd.gradle.Index

def buildProject = project

/* Configure the workspace project */
configure(parent) {
  buildDir = buildProject.buildDir

  task build {
    dependsOn "${buildProject.path}:build"
    dependsOn "${buildProject.path}:checkNeeded"
    dependsOn "${buildProject.path}:releaseNeeded"
    dependsOn "${buildProject.path}:dist"
    description "Assembles and packages the ${buildProject.name} project."
    group 'build'
  }
  defaultTasks = [build.path]
}

import org.apache.tools.ant.filters.ReplaceTokens
import aQute.bnd.osgi.Jar

/*
 * Setup tasks (p2 plugins)
 */
task p2Plugins(type: Copy) {
  dependsOn releaseNeeded
  from    zipTree("${buildDir}/${project.name}.main.jar")
  into    "${buildDir}/plugins"
  include '*.jar'

  doLast {
    String[] projs = bnd('p2', '').split(/\s*,\s*/)
    def targetDir = file("${buildDir}/plugins")
    if ((!targetDir.exists() && !targetDir.mkdirs()) || !targetDir.isDirectory()) {
      throw new GradleException("Could not create directory ${targetDir}")
    }
    projs.each {
      def proj = parent.findProject(it)
      if (proj == null) {
        throw new GradleException("Could not find project ${it}")
      }
  
      proj.bnd.project.getBuilder(null).withCloseable { pb ->
        pb.getSubBuilders()*.getBsn().each { bsn ->
          copy {
            from project.relativePath(proj.bnd.project.getOutputFile(bsn))
            into targetDir
          }
        }
      }
    }
  }
}

/*
 * Setup tasks (p2 features)
 */
task p2FeatureTree(type: Copy) {
    dependsOn p2Plugins
    from    'feature'
    into    "${buildDir}/features"
    doFirst {
      def masterVersion = String.format('%s-%tY%<tm%<td-%<tH%<tM%<tS-g%.7s',
                           bnd('gittag'),
                           Calendar.getInstance(TimeZone.getTimeZone("UTC")),
                           bnd('Git-SHA'))
      def featureTokens = ['master-version' : masterVersion, 'base-version' : bnd('base.version')]
      def plugins = fileTree("${buildDir}/plugins").getFiles()
      plugins.each {
        new Jar(it).withCloseable { jar ->
          featureTokens["${jar.getBsn()}-version"] = jar.getVersion()
        }
      }
      filter(ReplaceTokens, tokens: featureTokens )
    }
    include 'category.xml'
    include '**/feature.xml'
    inputs.files file("${buildDir}/plugins")
}

task p2FeatureMain(type: Zip) {
  dependsOn p2FeatureTree
  destinationDir = file("${buildDir}/features")
  archiveName    = 'bndtools.feature.jar'
  from             "${buildDir}/features/bndtools"
  include          'feature.xml'
}

task p2FeatureM2e(type: Zip) {
  dependsOn p2FeatureTree
  destinationDir = file("${buildDir}/features")
  archiveName    = 'bndtools.m2e.feature.jar'
  from             "${buildDir}/features/bndtools-m2e"
  include          'feature.xml'
}

task p2FeaturePde(type: Zip) {
  dependsOn p2FeatureTree
  destinationDir = file("${buildDir}/features")
  archiveName    = 'bndtools.pde.feature.jar'
  from             "${buildDir}/features/bndtools-pde"
  include          'feature.xml'
}

/*
 * Setup tasks (p2 repositories)
 */
task p2 {
  description 'Generate the p2 repositories.'
  group       'release'
  dependsOn p2Plugins, p2FeatureMain, p2FeatureM2e, p2FeaturePde

  inputs.files file('p2.xml'),
               fileTree(buildDir)
                   .include('p2/**')
                   .include('features/category.xml')
  outputs.dir "${buildDir}/p2"

  doLast {
    def bnd_verbose = logger.isEnabled(LogLevel.INFO)
    def bnd_eclipseDirectory = file('eclipse-3.5.2')
    def bnd_eclipseJar = new File(bnd_eclipseDirectory, 'plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar')
    def javaArgs  = []
    if (bnd_verbose) {
      javaArgs   += '-consoleLog'
    }
    javaArgs     += '-application'
    javaArgs     += 'org.eclipse.ant.core.antRunner'
    javaArgs     += '-data'
    javaArgs     += buildDir
    javaArgs     += '-buildfile'
    javaArgs     += 'p2.xml'
    javaArgs     += 'p2Bndtools'

    def result = javaexec {
      classpath      = files(bnd_eclipseJar)
      main           = 'org.eclipse.equinox.launcher.Main'
      args           = javaArgs
    }
    if (result.exitValue != 0) {
      throw new GradleException("Could not publish features and bundles -Bndtools")
    }

    javaArgs  = []
    if (bnd_verbose) {
      javaArgs   += '-consoleLog'
    }
    javaArgs     += '-application'
    javaArgs     += 'org.eclipse.equinox.p2.publisher.CategoryPublisher'
    javaArgs     += '-data'
    javaArgs     += buildDir
    javaArgs     += '-metadataRepository'
    javaArgs     += "file://${buildDir}/p2"
    javaArgs     += '-categoryDefinition'
    javaArgs     += "file://${buildDir}/features/category.xml"
    javaArgs     += '-compress'

    result = javaexec {
      classpath      = files(bnd_eclipseJar)
      main           = 'org.eclipse.equinox.launcher.Main'
      args           = javaArgs
    }
    if (result.exitValue != 0) {
      throw new GradleException("Could not categorise repository - Bndtools")
    }

    /* Clean up the files Eclipse leaves behind */
    fileTree(bnd_eclipseDirectory).include('configuration/*.log').each {
      it.delete()
    }

    delete(file("${bnd_eclipseDirectory}/configuration/org.eclipse.core.runtime"))
    delete(file("${bnd_eclipseDirectory}/configuration/org.eclipse.equinox.app" ))
    delete(file("${bnd_eclipseDirectory}/configuration/org.eclipse.osgi"        ))
    delete(file("${bnd_eclipseDirectory}/p2"                                    ))
    delete("${buildDir}/features")
    delete("${buildDir}/plugins")
  }
}

task('index', type: Index) {
  description 'Index the p2 repositories.'
  dependsOn p2
  group 'release'
  repositoryName = "Bndtools ${version}"
  destinationDir = "${buildDir}/p2"
  gzip = true
  bundles fileTree("${buildDir}/p2/plugins") {
    include '**/*.jar'
  }
}

/*
 * Setup tasks (distribution)
 */
task dist(type: Zip) {
  description 'Create distribution archives containing p2 repository (including R5 index).'
  group       'release'
  dependsOn index
  destinationDir = file(buildDir)
  archiveName    = 'bndtools-latest.zip'
  from             "${buildDir}/p2"
  include          '**'
}
