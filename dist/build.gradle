/*
 * dist Gradle build script
 */

import aQute.bnd.gradle.Index
import aQute.bnd.osgi.Jar
import org.apache.tools.ant.filters.ReplaceTokens

def buildProject = project

/* Configure the workspace project */
configure(parent) {
  buildDir = buildProject.buildDir

  task build {
    dependsOn "${buildProject.path}:build"
    dependsOn "${buildProject.path}:checkNeeded"
    dependsOn "${buildProject.path}:releaseNeeded"
    dependsOn "${buildProject.path}:index"
    if (JavaVersion.current().isJava8()) {
      dependsOn "${buildProject.path}:p2Zip"
    }
    description "Assembles, tests and releases the ${buildProject.name} project."
    group 'build'
  }
  defaultTasks = [build.path]
}

/* Configure this project */
File releaserepo = file(bnd('releaserepo', 'bundles')) /* Release repository. */
String masterVersion = String.format('%s-%tY%<tm%<td-%<tH%<tM%<tS-g%.7s',
                          bnd('gittag'),
                          Calendar.getInstance(TimeZone.getTimeZone("UTC")),
                          bnd('Git-SHA'))
Map<String, String> featureProperties = ['master-version': masterVersion, 'base-version': bnd('base.version')]

task p2Plugins(type: Sync) {
  dependsOn build
  from    bnd('plugins').tokenize(',')
  into    "${buildDir}/plugins"
  eachFile { details ->
    new Jar(details.file).withCloseable { jar ->
      String bsn = jar.getBsn()
      String version = jar.getVersion()
      featureProperties["${bsn}-version"] = version
      details.name = "${bsn}_${version}.jar"
    }
  }
}

task p2FeatureMain(type: Zip) {
  dependsOn p2Plugins
  destinationDir = file("${buildDir}/features")
  archiveName    = "bndtools.main.feature_${masterVersion}.jar"
  from             'features/bndtools.main'
  include          'feature.xml'
  doFirst {
    filter(ReplaceTokens, tokens: featureProperties )
  }
}

task p2FeatureM2e(type: Zip) {
  dependsOn p2Plugins
  destinationDir = file("${buildDir}/features")
  archiveName    = "bndtools.m2e.feature_${masterVersion}.jar"
  from             'features/bndtools.m2e'
  include          'feature.xml'
  doFirst {
    filter(ReplaceTokens, tokens: featureProperties )
  }
}

task p2FeaturePde(type: Zip) {
  dependsOn p2Plugins
  destinationDir = file("${buildDir}/features")
  archiveName    = "bndtools.pde.feature_${masterVersion}.jar"
  from             'features/bndtools.pde'
  include          'feature.xml'
  doFirst {
    filter(ReplaceTokens, tokens: featureProperties )
  }
}

task p2 {
  description 'Publish the p2 repositories.'
  group       'release'
  inputs.files p2Plugins, p2FeatureMain, p2FeatureM2e, p2FeaturePde, 'p2.xml', 'features/category.xml'
  ext.destinationDir = file("${buildDir}/p2")
  outputs.dir destinationDir
  doLast {
    def eclipseDir = file('eclipse-3.5.2')
    javaexec {
      classpath "${eclipseDir}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar"
      main = 'org.eclipse.equinox.launcher.Main'
      if (logger.isDebugEnabled()) {
        args '-consoleLog'
      }
      args '-application'
      args 'org.eclipse.ant.core.antRunner'
      args '-data'
      args buildDir
      if (logger.isDebugEnabled()) {
        args '-debug'
      } else {
        args '-quiet'
      }
      args '-buildfile'
      args 'p2.xml'
      args 'p2Bndtools'
    }.assertNormalExitValue()

    javaexec {
      classpath "${eclipseDir}/plugins/org.eclipse.equinox.launcher_1.0.201.R35x_v20090715.jar"
      main = 'org.eclipse.equinox.launcher.Main'
      if (logger.isDebugEnabled()) {
        args '-consoleLog'
      }
      args '-application'
      args 'org.eclipse.equinox.p2.publisher.CategoryPublisher'
      args '-data'
      args buildDir
      args '-metadataRepository'
      args uri(destinationDir)
      args '-categoryDefinition'
      args uri('features/category.xml')
      args '-compress'
    }.assertNormalExitValue()

    delete fileTree(eclipseDir).include('configuration/*.log'),
      "${eclipseDir}/configuration/org.eclipse.core.runtime",
      "${eclipseDir}/configuration/org.eclipse.equinox.app",
      "${eclipseDir}/configuration/org.eclipse.osgi",
      "${eclipseDir}/p2"
  }
}

task p2Zip(type: Zip) {
  description 'Create distribution archives containing p2 repository.'
  group       'release'
  inputs.files p2
  destinationDir = buildDir
  archiveName    = 'bndtools-latest.zip'
  from             "${buildDir}/p2"
  include          '**'
}

task('indexonly', type: Index) {
  description 'Index the release repository only. (Does not depend on releaseNeeded).'
  group 'release'
  repositoryName = "Bnd/Bndtools ${version}"
  destinationDir = releaserepo
  gzip = true
  bundles fileTree(destinationDir) {
    include '**/*.jar'
    exclude '**/*-latest.jar'
    exclude '**/*-sources.jar'
    exclude '**/*-javadoc.jar'
  }
}

task('index') {
  description 'Index the release repository.'
  group 'release'
  dependsOn releaseNeeded
  finalizedBy indexonly
}

clean {
  delete releaserepo
}
