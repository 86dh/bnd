h1. Overview

Bndtools is an Eclipse development environment for developing OSGi bundles and applications. It is based the "Bnd" bundle tool, originally developed by Peter Kriens.

h2. Table of Contents

{toc}

h1. Installing Bndtools

Bndtools requires and has been tested with Eclipse versions 3.4 through 3.6. Installation of Bndtools uses the standard Eclipse update installer; if you are an experienced Eclipse user then you will only need to know the update site URL, which is as follows:

@http://bndtools-updates.s3.amazonaws.com/@

TODO: full installation instructions for newbies.

h1. Tutorial

In this tutorial we will build a sample application composed of two components and an API. There will be a total of three bundles created, and in this case we will deliver all three bundles from the same bundle (see Section TODO for information on the pros and cons of delivering multiple bundles from a single project).

h2. Create a New Bnd OSGi Project

First we need to create a Bnd OSGi Project. This is just a standard Eclipse Java Project, with an additional builder for constructing OSGi bundles.

From the File menu, select New -> Bnd OSGi Project.

!images/newwizard_01.png!

On the next page, enter @org.example@ as the name of the project. Select at least J2SE-1.5 for the JRE execution environment.

!images/newwizard_02.png!

On the next page, you are offered a choice of static repositories to import into the workspace. These repositories host bundles that you may wish to use during development or runtime. We will use bundles from the Base repository, so leave this entry checked in the list and click Next. As this is the first time a repository has been configured, the tool will take a few seconds to copy in the contents.

!images/newwizard_03.png!

The next page shows the bundles available in the workspace repository, which we can choose to add to the project build path. This is necessary if our project will use the APIs defined in those bundles. The list also contains "libraries", which are aggregations of bundles that are expanded upon addition. For this example, double click on the @lib.component-dev@ library to add it to the right-hand list. This library contains: an annotations API that will be useful for defining components; the OSGi core and compendium APIs; JUnit for testing.

!images/newwizard_04.png!

Important Points:
* Bnd projects are based on standard Eclipse Java projects.
* The bundles used by the project are provided by a repository.
* The @bnd.bnd@ file in each project controls the settings for that project.

h2. Write an Exported API

In the @src@ directory of the new project, create a package named @org.example.api@. This package will contain our API interface, which for the purposes of the example is fairly trivial; in the new package create a Java interface named @Greeting@, as follows:

bc.. 
package org.example.api;

public interface Greeting {
	String sayHello(String name);
}

p. Now we will create a bundle that exports the API. Open the New Wizard and select New Bnd Bundle Descriptor.

!images/newbundle_01.png!

Enter @api@ as the name of the bundle and click Finish.

!images/newbundle_02.png!

A pop-up dialog will ask if "sub-bundles" should be enabled on the project; answer Yes to this question. The bundle editor will open on the new file, @api.bnd@.

You will also notice that a bundle JAR has been build in the @generated@ directory, named @org.example.api.jar@. The bundle JAR is rebuilt every time its bundle descriptor (i.e., the @.bnd@ file) is changed, or when its contents change. However if you double-click on the JAR file to examine its contents, you will notice that it is empty, save for the @META-INF/MANIFEST.MF@ file and a copy of the bundle descriptor. This is because we have not told Bnd what packages to include in the bundle.

We wish to include the @org.example.api@ package in the bundle as an exported package. We can do this by selecting the Exports tab of the editor and then either dragging in the @org.example.api@ package from the Package Explorer view, or clicking the Add button and selecting the package from the pop-up dialog. Whichever way we choose, the tool then asks us for the version to be declared on the newly exported package. Select the default, which is to keep the exported package version in sync with its enclosing bundle's version.

!images/exportversion.png!

Important Points:
* Bnd projects can provide multiple bundles, or just one.
* When a Bnd project provides just a single bundle, the configuration for that bundle is in the main @bnd.bnd@ file. When providing multiple bundles, the settings for each are in separate @.bnd@ files called "sub-bundles".
* The identity for a bundle -- known as its "Bundle Symbolic Name", or BSN -- is controlled by the Bnd project name. In the case of a single-bundle project, the BSN is equal to the project name. In the case of a multi-bundle project, the BSN for each bundle is prefixed by the project name. Therefore a sub-bundle named @api.bnd@ in the @org.example@ project results in a bundle with a BSN of @org.example.api@.



