apply plugin: 'groovy'

repositories {
  mavenCentral()
}

dependencies {
  compileOnly localGroovy()
  compileOnly gradleApi()
  testImplementation gradleTestKit()
  testImplementation("org.spockframework:spock-core:2.0-M4-groovy-${GroovySystem.shortVersion}") {
        exclude group: 'org.codehaus.groovy'
        exclude group: 'org.junit.platform'
  }
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
  tasks.withType(GroovyCompile.class).configureEach {
    groovyOptions.fork 'jvmArgs': jpmsOptions
  }
}

def pluginUnderTestResources = project.layout.buildDirectory.dir('plugin-under-test')

def pluginUnderTestMetadata = tasks.register('pluginUnderTestMetadata', WriteProperties.class) {
 def pluginClasspath = project.providers.provider({ ->
    return project.files(configurations.runtimeClasspath.allArtifacts.files,
     configurations.runtimeClasspath.resolvedConfiguration.files)
  })
  inputs.files(pluginClasspath).withPropertyName('pluginClasspath')
  outputFile = pluginUnderTestResources.map { it.file('plugin-under-test-metadata.properties') }
  doFirst {
    property('implementation-classpath',  pluginClasspath.get().asPath)
  }
}

sourceSets {
   test {
     output.dir(pluginUnderTestResources, builtBy: pluginUnderTestMetadata)
   }
}

tasks.named('test') {
  def testresources = project.file('testresources')
  def target = project.layout.buildDirectory.dir('testresources')
  inputs.files tasks.named('jar')
  inputs.dir testresources
  systemProperty 'bnd_version', bnd('bnd_version')
  systemProperty 'org.gradle.warning.mode', gradle.startParameter.warningMode.name().toLowerCase()
  doFirst { // copy test resources into build dir
    project.delete(target)
    copy {
      from testresources
      into target
    }
  }
}

tasks.named('release') {
  dependsOn 'groovydoc'
}
