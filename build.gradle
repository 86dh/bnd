/*
 * Master Gradle build script
 *
 * Depends on bndPlugin property set by settings.gradle.
 * and bnd_* values from gradle.properties.
 */

import aQute.lib.io.IO
import aQute.bnd.osgi.About

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
	ext.jpmsOptions = [
		"--add-opens=java.base/java.lang=ALL-UNNAMED",
		"--add-opens=java.base/java.lang.invoke=ALL-UNNAMED",
		"--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
		"--add-opens=java.base/java.io=ALL-UNNAMED",
		"--add-opens=java.base/java.net=ALL-UNNAMED",
		"--add-opens=java.base/java.nio=ALL-UNNAMED",
		"--add-opens=java.base/java.util=ALL-UNNAMED",
		"--add-opens=java.base/java.util.jar=ALL-UNNAMED",
		"--add-opens=java.base/java.util.regex=ALL-UNNAMED",
		"--add-opens=java.base/java.util.zip=ALL-UNNAMED",
		"--add-opens=java.base/sun.nio.ch=ALL-UNNAMED",
		"--add-opens=java.base/sun.net.www.protocol.file=ALL-UNNAMED",
		"--add-opens=java.base/sun.net.www.protocol.ftp=ALL-UNNAMED",
		"--add-opens=java.base/sun.net.www.protocol.http=ALL-UNNAMED",
		"--add-opens=java.base/sun.net.www.protocol.https=ALL-UNNAMED",
		"--add-opens=java.base/sun.net.www.protocol.jar=ALL-UNNAMED",
		"--add-opens=java.base/sun.net.www.protocol.jrt=ALL-UNNAMED"
	]
}

/* Configure the subprojects */
subprojects {
	if (pluginManager.hasPlugin("biz.aQute.bnd")) {
		group = bnd.get("-groupid")
		version = bnd.get("base.version")
		tasks.withType(JavaCompile).configureEach {
			options.compilerArgs.add("-Xlint:unchecked")
		}
		tasks.named("javadoc") {
			options.tags = [
				"Immutable:t:",
				"ThreadSafe:t:",
				"NotThreadSafe:t:",
				"GuardedBy:mf:\"Guarded By:\""
			]
		}
		tasks.named("test") {
			useJUnitPlatform()
			reports {
				junitXml {
					outputPerTestCase = true
					mergeReruns = true
				}
			}
			testLogging {
				exceptionFormat = "full"
				info {
					events("STANDARD_OUT", "STANDARD_ERROR", "STARTED", "FAILED", "PASSED", "SKIPPED")
				}
			}
			if (!logger.isInfoEnabled()) {
				var stdOut = [:]
				var stdErr = [:]
				onOutput { descriptor, event ->
					if (event.destination == TestOutputEvent.Destination.StdErr) {
						stdErr.get(descriptor, []).add(event)
					} else {
						stdOut.get(descriptor, []).add(event)
					}
				}
				afterTest { descriptor, result ->
					var stdErrEvents = stdErr.remove(descriptor)
					var stdOutEvents = stdOut.remove(descriptor)
					if (result.resultType == TestResult.ResultType.FAILURE) {
						if (stdErrEvents && !stdErrEvents.empty) {
							logger.lifecycle("\n{} > {} STANDARD_ERROR", descriptor.className, descriptor.name)
							stdErrEvents.each { event ->
								logger.lifecycle("    {}", event.message.trim())
							}
						}
						if (stdOutEvents && !stdOutEvents.empty) {
							logger.lifecycle("\n{} > {} STANDARD_OUT", descriptor.className, descriptor.name)
							stdOutEvents.each { event ->
								logger.lifecycle("    {}", event.message.trim())
							}
						}
					}
				}
			}
			if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_1_9)) {
				jvmArgs(jpmsOptions)
				environment("JAVA_OPTS": jpmsOptions.join(" "))
			}
			if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_14)) {
				jvmArgs("-XX:+ShowCodeDetailsInExceptionMessages")
			}
			inputs.files(fileTree(layout.getProjectDirectory()) {
				include("testresources/", "testdata/")
				exclude {
					var f = it.getFile()
					if (f.isDirectory() && f.list().length == 0) {
						return true
					}
					try {
						return "git check-ignore ${f}".execute().waitFor() == 0
					} catch (Exception e) {
						return false
					}
				}
			}).withPathSensitivity(PathSensitivity.RELATIVE).withPropertyName("testFolders")
			systemProperty("org.slf4j.simpleLogger.defaultLogLevel", gradle.getStartParameter().getLogLevel().name())
			if (System.getProperty("maven.repo.local")) {
				systemProperty("maven.repo.local", IO.getFile(gradle.getStartParameter().getCurrentDir(), System.getProperty("maven.repo.local")))
			}
			if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_17)) {
				systemProperty("java.security.manager", "allow")
			}
		}
	}
}

tasks.register("buildscriptDependencies") {
	doLast {
		println "Java version: ${JavaVersion.current()}"
		println "Bnd version:  ${About.getBndVersion()}"
		println "bnd_plugin:   ${bnd_plugin}"
		println "bnd_repourl:  ${bnd_repourl}"
		println buildscript.configurations.classpath.asPath
	}
}
